import os

# Autogenerated with DRAKON Editor 1.27
class Repertoire(object):

    def __init__(self, triplet_oswalk):
        #item 44
        self.racine, \
        self.reps, \
        self.fichiers = triplet_oswalk
        self.nom_fichiercache = 'lslr.du'
        self.chemin_fichiercache = os.path.join(self.racine, self.nom_fichiercache)


    def _after_init(self):
        #item 90
        if os.path.isfile(self.chemin_fichiercache):
            #item 96
            self.taille = self._lecture_du()
        else:
            #item 93
            self.taille = self._somme_taille_fichiers_dans_un_rep()
            #item 97
            self._ecriture_du(self.taille)


    def _ecriture_du(self, valeur):
        #item 82
        with open(self.chemin_fichiercache, 'w') as f:
            f.write(str(valeur))


    def _lecture_du(self):
        #item 69
        with open(self.chemin_fichiercache, 'r') as f:
            entier = long(f.readline(50))
            return entier


    def _somme_taille_fichiers_dans_un_rep(self):
        #item 43
        import os
        #item 27
        size = 0
        #item 24
        if (os.path.exists(self.racine)) and (self.fichiers):
            #item 21
            import functools
            import operator
            size = functools.reduce(\
            operator.add,\
             (os.path.getsize(os.path.join(self.racine,fichier))\
             for fichier in self.fichiers \
            if not fichier.endswith('.du')))
        else:
            pass
        #item 22
        return size


    def get_path(self):
        #item 68
        return self.racine


    def get_taille(self):
        #item 100
        self._after_init()
        #item 67
        return self.taille


