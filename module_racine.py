import module_repertoire

# Autogenerated with DRAKON Editor 1.27

def _get_taille(objet_repertoire):
    #item 35
    return objet_repertoire.get_taille()

class Racine(object):
    """ 
    cumule tailles rep
    lance reccu sur reps
    stocke resultat dans cache
    lance affichage resultats
    """

    def __init__(self, racine):
        #item 20
        self.racine = racine
        #item 21
        self.cache = []


    def _display_cache(self):
        for dblet_enum in enumerate(self.cache):
            #item 29
            nbr, rep = dblet_enum
            print "rang:{n} taille:{t} chemin:{c}".format(n=nbr, t=rep.get_taille(), c=rep.get_path())


    def _sort_cache_in_place(self):
        #item 41
        self.cache.sort(key=_get_taille, reverse=True)


    def pass1(self):
        #item 48
        import os
        import module_repertoire
        #item 53
        if self.cache:
            pass
        else:
            for triplet_oswalk in os.walk(self.racine):
                #item 51
                self.cache.append(module_repertoire.Repertoire(triplet_oswalk))
        #item 56
        self._sort_cache_in_place()


    def pass2(self):
        #item 62
        if self.cache:
            #item 65
            self._display_cache()
        else:
            #item 66
            self.pass1()
            #item 67
            self._display_cache()


