import unittest
import module_repertoire
import os

# Autogenerated with DRAKON Editor 1.27

def creer_fichier_random(size, rep):
    #item 37
    import tempfile
    import os
    #item 68
    ou = os.path.abspath(rep)
    
    with tempfile.NamedTemporaryFile(delete=False, dir=ou) as bigfile:
        bigfile.seek(size - 1)
        bigfile.write("0")


def creer_rep():
    #item 38
    import tempfile
    import os
    #item 31
    ch = tempfile.mkdtemp(dir=os.getcwd())
    return ch

class testrep(unittest.TestCase):

    def setUp(self):
        #item 54
        self.repertoire = creer_rep()
        taille = 300
        self.tailletot = 2 * taille
        self.fich_a = creer_fichier_random(rep=self.repertoire, size=taille)
        self.fich_b = creer_fichier_random(rep=self.repertoire, size=taille)


    def tearDown(self):
        for triplet in os.walk(self.repertoire):
            #item 61
            racine, _osef_, liste_fichiers = triplet
            for fichier in liste_fichiers:
                #item 67
                os.remove(os.path.join(racine, fichier))
        #item 64
        os.rmdir(self.repertoire)


    def test_afterinit_onetime(self):
        #item 87
        objet_walk = os.walk(self.repertoire)
        triplet_oswalk = objet_walk.next()
        #item 89
        
        objet_rep = module_repertoire.Repertoire(triplet_oswalk)
        taille_obtenue = objet_rep.get_taille()
        #item 91
        self.assertEqual(taille_obtenue, self.tailletot)


    def test_afterinit_twotimes(self):
        #item 104
        objet_walk = os.walk(self.repertoire)
        triplet_oswalk = objet_walk.next()
        #item 106
        objet_rep = module_repertoire.Repertoire(triplet_oswalk)
        taille_obtenue = objet_rep.get_taille()
        taille_obtenue = objet_rep.get_taille()
        #item 108
        self.assertEqual(taille_obtenue, self.tailletot)


    def test_sizerep(self):
        #item 42
        import os
        #item 81
        objet_walk = os.walk(self.repertoire)
        triplet_oswalk = objet_walk.next()
        #item 18
        
        objet_rep = module_repertoire.Repertoire(triplet_oswalk)
        #taille_obtenue = objet_rep.get_taille()
        taille_obtenue = objet_rep._somme_taille_fichiers_dans_un_rep()
        #item 45
        self.assertEqual(taille_obtenue, self.tailletot)


